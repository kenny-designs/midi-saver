'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Stream = function () {
    function Stream(worker, options) {
        _classCallCheck(this, Stream);

        var listeners = {};
        /**
         * Add a listener for a specified event type.
         * @param type {string} the event name
         * @param listener {function} the callback to be invoked when an event of
         * the specified type occurs
         */
        this.on = function (type, listener) {
            if (!listeners[type]) {
                listeners[type] = [];
            }
            listeners[type].push(listener);
        };
        /**
         * Remove a listener for a specified event type.
         * @param type {string} the event name
         * @param listener {function} a function previously registered for this
         * type of event through `on`
         */
        this.off = function (type, listener) {
            var index;
            if (!listeners[type]) {
                return false;
            }
            index = listeners[type].indexOf(listener);
            listeners[type].splice(index, 1);
            return index > -1;
        };
        /**
         * Trigger an event of the specified type on this stream. Any additional
         * arguments to this function are passed as parameters to event listeners.
         * @param type {string} the event name
         */
        this.trigger = this.emit = function (type) {
            var callbacks, i, length, args;
            callbacks = listeners[type];
            if (!callbacks) {
                return;
            }
            // Slicing the arguments on every invocation of this method
            // can add a significant amount of overhead. Avoid the
            // intermediate object creation for the common case of a
            // single callback argument
            if (arguments.length === 2) {
                length = callbacks.length;
                for (i = 0; i < length; ++i) {
                    callbacks[i].call(this, arguments[1]);
                }
            } else {
                args = [];
                i = arguments.length;
                for (i = 1; i < arguments.length; ++i) {
                    args.push(arguments[i]);
                }
                length = callbacks.length;
                for (i = 0; i < length; ++i) {
                    callbacks[i].apply(this, args);
                }
            }
        };
        /**
         * Destroys the stream and cleans up.
         */
        this.dispose = function () {
            listeners = {};
        };
    }

    _createClass(Stream, [{
        key: 'pipe',
        value: function pipe(destination) {
            this.on('data', function (data) {
                destination.push(data);
            });

            this.on('done', function (flushSource) {
                destination.flush(flushSource);
            });

            return destination;
        }
    }, {
        key: 'push',
        value: function push(data) {
            this.trigger('data', data);
        }
    }, {
        key: 'flush',
        value: function flush(flushSource) {
            this.trigger('done', flushSource);
        }
    }]);

    return Stream;
}();

exports.default = Stream;
module.exports = exports['default'];